# setup.cfg configuration file is used together with configurations in setup.py
# Configurations that are common to dev-ops template projects go to setup.py
# Project specific configurations go to setup.cfg
# https://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files
#
# The 'Makefile' triggers builds and uses setup.py/setup.cfg/requirements.txt
# Adapt the Makefile variable SETUPTOOLSFILES if dependencies change, e.g.,
# you switch to using only setup.py xor setup.cfg for defining your package.

[metadata]
# ATTENTION: the name must match the name of the top-level import package
# see Makefile variable MODULE.
# Naming the project as the top-level import package is also consistent with
# conventions.
name = sampleproject
# The version string will be included in your Python package
# https://setuptools.readthedocs.io/en/latest/setuptools.html#specifying-your-project-s-version
version = 0.1
author = Full Name
# author-email = 
description = This is an example package
long-description = file: README.md
long_description_content_type = text/markdown
# keywords = keyword1, keyword2, keyword3
# url = http://example.com/HelloWorld/
# project_urls =
#     Bug Tracker = https://bugs.example.com/HelloWorld/
#     Documentation = https://docs.example.com/HelloWorld/
#     Source Code = https://code.example.com/HelloWorld/
platforms = any
license = MIT
# Define the intended audience of your Python package
# For a full list of classifiers see: https://pypi.org/classifiers/
classifiers =
    Intended Audience :: Developers
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 3

[options]
# Package dependencies
# install_requires=

# Data files should always be part of the package and you should avoid
# dependencies to data files outside of the package.
# find_packages (see above) searches Python packages and includes source
# files. In order to include data files, too, you can use
# include_package_data OR package_data
# Note that package_data will not work when include_package_data=True
# With include_package_data you must manage your data file includes in
# MANIFEST.in. With package_data you manage data file includes relative
# to package key provided in the dictionary.
# https://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files
# include_package_data = True,
# [options.package_data]
#     # If any package contains *.txt or *.rst files, include them:
#     * = '*.txt', '*.rst'
#     # And include any *.msg files found in the 'hello' package, too:
#     hello = *.msg

# Include scripts/executables for application from 'scripts' directory
# Executables can also be generated automatically (see options.entry_points)
# scripts = 
#     scripts/executable
# Note: 'scripts/entrypoint.sh' is directly included in Dockerfile 

# Generate entry points (executables) automatically from Python functions
#     executable = package.module:function
# Executables will be included in the PATH search directory of the Python
# environment, e.g., /usr/local/bin
[options.entry_points]
console_scripts = 
    sampleproject = sampleproject.sample:main